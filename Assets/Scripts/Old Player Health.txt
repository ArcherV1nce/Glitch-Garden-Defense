    #region В визуализацию
    //[SerializeField] private TextMeshProUGUI _healthTextUI = null;
    //[SerializeField] private AudioSource _musicSource = null;
    //private Coroutine _doomedCoroutine = null;
    #endregion

    private void OnTriggerEnter2D(Collider2D collision)
    {
        #region В класс деревни
        /*
        if (collision.GetComponent<Attacker>())
        {
            _playerHealth -= 20;
            collision.GetComponent<Health>().ReciveDamage(1000);
            UpdatePlayerHealthUI();
        }
        */
        #endregion
    }

    #region В визуализацию
    /*
    private void UpdatePlayerHealthUI()
    {
        if (!_isDoomed) 
        { CheckLoss();
            _healthTextUI.text = "Glitch population: " + _playerHealth + " ppl";
        }
    }
    */
    #endregion

    #region В класс деревни
    private void CheckLoss()
    {
        /*
        if (_isDoomed)
        {
            _healthTextUI.rectTransform.sizeDelta = new Vector2(1200, 150);
            _healthTextUI.fontSize = 72;
            _healthTextUI.color = new Color32(255, 0, 0, 255);
            transform.gameObject.GetComponent<BoxCollider2D>().isTrigger = false;
            _doomedCoroutine = StartCoroutine(GameOverUI());
            if (_musicSource != null) { StartCoroutine(LoveringSound()); }
        }
        */
    }
    #endregion

    #region В визуализацию
    /*
    private IEnumerator GameOverUI()
    {
        yield return new WaitForSecondsRealtime(1f);
        
        string loseText = "Your town was doomed because of you...";
        char[] loseTextCharArray = loseText.ToCharArray();
        string tempText = "";
        
        for (int i = 0; i < loseTextCharArray.Length; i++)
        {
            yield return new WaitForSecondsRealtime(0.1f);
            tempText += loseTextCharArray[i];
            _healthTextUI.text = tempText;
            
            if (tempText == loseText)
            {
                loseTextCharArray = new char[0];
                break;
            }
        }

        yield return new WaitForSecondsRealtime(0.5f);
        StopCoroutine(_doomedCoroutine);
    }
    private IEnumerator LoveringSound()
    {
        float volume = _musicSource.volume;
        
        while (volume > 0)
        {
            volume -= 0.05f;
            _musicSource.volume = volume;
            yield return new WaitForSecondsRealtime(0.15f);
        }
    }
    */
    #endregion